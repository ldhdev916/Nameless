plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.6.0"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "net.minecraftforge.gradle.forge" version "6f53277"
    id "org.spongepowered.mixin" version "d75e32e"
}

version = project.modVersion
group = "com.happyandjust"
archivesBaseName = project.modName
String modid = project.modId
String kotlin_version = '1.6.0'
String elementa_version = '395+mc-1.18'
String vigilance_version = '191+mc-1.18'

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
}

mixin {
    add sourceSets.main, "mixins.${modid}.refmap.json"
}

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
        url "https://repo.sk1er.club/repository/maven-public"
    }
}

shadowJar {
    archiveClassifier.set('')

    dependencies {
        include(dependency("org.spongepowered:mixin:0.7.11-SNAPSHOT"))

        include(dependency("gg.essential:elementa-1.8.9-forge:${elementa_version.replaceAll("\\+", "\\\\+")}"))
        include(dependency("gg.essential:universalcraft-1.8.9-forge:173\\+mc-1.18"))
        include(dependency("gg.essential:vigilance-1.8.9-forge:${vigilance_version.replaceAll("\\+", "\\\\+")}"))

        include(dependency("org.commonmark:commonmark:0.17.1"))
        include(dependency("org.commonmark:commonmark-ext-ins:0.17.1"))
        include(dependency("org.commonmark:commonmark-ext-gfm-strikethrough:0.17.1"))

        include(dependency("org.dom4j:dom4j:2.1.1"))

        include(dependency("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"))

        include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.5.2-native-mt"))
    }

    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude(
            "dummyThing",
            "LICENSE.txt",
            "META-INF/versions/",
            "fabric.mod.json",
            "README.md"
    )

    manifest.attributes(
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'MixinConfigs': "mixins.${modid}.json",
            'FMLCorePluginContainsFMLMod': true,
            "ForceLoadAsMod": true,
    )
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.spongepowered:mixin:0.7.11-SNAPSHOT"
    implementation "gg.essential:elementa-1.8.9-forge:$elementa_version"
    implementation "gg.essential:vigilance-1.8.9-forge:$vigilance_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt'

    annotationProcessor "org.spongepowered:mixin:0.7.11-SNAPSHOT"
}

/**
 * This task simply replaces the `${version}` and `${mcversion}` properties in the mcmod.info with the data from Gradle
 */
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/**
 * This task simply moves resources so they can be accessed at runtime, Forge is quite weird isn't it
 */
task moveResources {
    doLast {
        ant.move file: "${buildDir}/resources/main",
                todir: "${buildDir}/classes/java"
    }
}

moveResources.dependsOn processResources
classes.dependsOn moveResources

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}

jar.finalizedBy shadowJar
