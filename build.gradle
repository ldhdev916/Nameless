plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "net.minecraftforge.gradle.forge" version "6f53277"
    id "org.spongepowered.mixin" version "d75e32e"
}

version = project.modVersion
group = "com.happyandjust"
archivesBaseName = project.modName
String modid = project.modId

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false

    clientRunArgs += '--tweakClass gg.essential.loader.stage0.EssentialSetupTweaker'
}

mixin {
    add sourceSets.main, "mixins.${modid}.refmap.json"
}

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
        url "https://repo.sk1er.club/repository/maven-public"
    }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    implementation "org.spongepowered:mixin:0.7.11-SNAPSHOT"
    implementation 'gg.essential:essential-1.8.9-forge:1626+release-launch'
    include 'gg.essential:loader-launchwrapper:1.1.2'

    annotationProcessor "org.spongepowered:mixin:0.7.11-SNAPSHOT"
}

/**
 * This task simply replaces the `${version}` and `${mcversion}` properties in the mcmod.info with the data from Gradle
 */
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

/**
 * This task simply moves resources so they can be accessed at runtime, Forge is quite weird isn't it
 */
task moveResources {
    doLast {
        ant.move file: "${buildDir}/resources/main",
                todir: "${buildDir}/classes/java"
    }
}

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}

jar {
    manifest.attributes(
            'TweakClass': 'gg.essential.loader.stage0.EssentialSetupTweaker',
            'MixinConfigs': "mixins.${modid}.json",
            'FMLCorePluginContainsFMLMod': true,
            "ForceLoadAsMod": true,
    )

    enabled = false
}

moveResources.dependsOn processResources
classes.dependsOn moveResources

shadowJar {
    archiveClassifier.set('')
    configurations = [project.configurations.include]

    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude(
            "dummyThing",
            "LICENSE.txt",
            "META-INF/versions/",
            "fabric.mod.json",
            "README.md"
    )
}

jar.dependsOn shadowJar
