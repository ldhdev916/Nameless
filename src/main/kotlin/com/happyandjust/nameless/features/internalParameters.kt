/*
 * Nameless - 1.8.9 Hypixel Quality Of Life Mod
 * Copyright (C) 2022 HappyAndJust
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package com.happyandjust.nameless.features

import com.happyandjust.nameless.core.value.ChromaColor
import com.happyandjust.nameless.features.impl.general.BedWarsESP
import com.happyandjust.nameless.features.impl.general.DisplayBetterArmor
import com.happyandjust.nameless.features.impl.general.GlowAllPlayers
import com.happyandjust.nameless.features.impl.general.RemoveNegativeEffects
import com.happyandjust.nameless.features.impl.general.RemoveNegativeEffects.PotionType
import com.happyandjust.nameless.features.impl.misc.*
import com.happyandjust.nameless.features.impl.misc.ChangeWorldTime.WorldTimeFormat
import com.happyandjust.nameless.features.impl.qol.*
import com.happyandjust.nameless.features.impl.qol.GiftESP.GiftGameType
import com.happyandjust.nameless.features.impl.qol.HyChatChannelChanger.PrefixType
import com.happyandjust.nameless.features.impl.qol.InGameStatViewer.DisplayType
import com.happyandjust.nameless.features.impl.qol.InGameStatViewer.InGameStatIdentifier
import com.happyandjust.nameless.features.impl.qol.TrajectoryPreview.TrajectoryType
import com.happyandjust.nameless.features.impl.settings.GhostBlock
import com.happyandjust.nameless.features.impl.skyblock.*
import com.happyandjust.nameless.features.impl.skyblock.EndermanSlayerHelper.VoidgloomIdentifier
import com.happyandjust.nameless.features.impl.skyblock.ExperimentationTableHelper.ExperimentationType
import com.happyandjust.nameless.hypixel.skyblock.DamageIndicateType
import com.happyandjust.nameless.hypixel.skyblock.Gemstone
import net.minecraft.block.Block

/*
 * Auto-Generated by Intellij Plugin, Do Not Edit This File Manually
 */

inline var RemoveNegativeEffects.enabledPotionTypes: List<PotionType>
    get() = getParameterValue("enabledPotionTypes")
    set(value) {
        getParameter<List<PotionType>>("enabledPotionTypes").value = value
    }

inline var BedWarsESP.invisible: Boolean
    get() = getParameterValue("invisible")
    set(value) {
        getParameter<Boolean>("invisible").value = value
    }

inline var DisplayBetterArmor.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var DisplayBetterArmor.scale: Double
    get() = getParameterValue("scale")
    set(value) {
        getParameter<Double>("scale").value = value
    }

inline var GlowAllPlayers.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var GlowAllPlayers.invisible: Boolean
    get() = getParameterValue("invisible")
    set(value) {
        getParameter<Boolean>("invisible").value = value
    }

inline var GlowAllPlayers.invisible_override: Boolean
    get() = getParameterValue("invisible/override")
    set(value) {
        getParameter<Boolean>("invisible/override").value = value
    }

inline var GlowAllPlayers.invisible_color: ChromaColor
    get() = getParameterValue("invisible/color")
    set(value) {
        getParameter<ChromaColor>("invisible/color").value = value
    }

inline var ChangeDamagedEntityColor.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var ChangeFishParticleColor.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var ChangeLeatherArmorColor.helmet: Boolean
    get() = getParameterValue("helmet")
    set(value) {
        getParameter<Boolean>("helmet").value = value
    }

inline var ChangeLeatherArmorColor.helmet_color: ChromaColor
    get() = getParameterValue("helmet/color")
    set(value) {
        getParameter<ChromaColor>("helmet/color").value = value
    }

inline var ChangeLeatherArmorColor.chestplate: Boolean
    get() = getParameterValue("chestplate")
    set(value) {
        getParameter<Boolean>("chestplate").value = value
    }

inline var ChangeLeatherArmorColor.chestplate_color: ChromaColor
    get() = getParameterValue("chestplate/color")
    set(value) {
        getParameter<ChromaColor>("chestplate/color").value = value
    }

inline var ChangeLeatherArmorColor.leggings: Boolean
    get() = getParameterValue("leggings")
    set(value) {
        getParameter<Boolean>("leggings").value = value
    }

inline var ChangeLeatherArmorColor.leggings_color: ChromaColor
    get() = getParameterValue("leggings/color")
    set(value) {
        getParameter<ChromaColor>("leggings/color").value = value
    }

inline var ChangeLeatherArmorColor.boots: Boolean
    get() = getParameterValue("boots")
    set(value) {
        getParameter<Boolean>("boots").value = value
    }

inline var ChangeLeatherArmorColor.boots_color: ChromaColor
    get() = getParameterValue("boots/color")
    set(value) {
        getParameter<ChromaColor>("boots/color").value = value
    }

inline var ChangeNicknameColor.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var ChangeSkyColor.skyColor: ChromaColor
    get() = getParameterValue("skyColor")
    set(value) {
        getParameter<ChromaColor>("skyColor").value = value
    }

inline var ChangeWorldTime.time: Int
    get() = getParameterValue("time")
    set(value) {
        getParameter<Int>("time").value = value
    }

inline var ChangeWorldTime.timeFormat: WorldTimeFormat
    get() = getParameterValue("timeFormat")
    set(value) {
        getParameter<WorldTimeFormat>("timeFormat").value = value
    }

inline var DisguiseNickname.nickname: String
    get() = getParameterValue("nickname")
    set(value) {
        getParameter<String>("nickname").value = value
    }

inline var DisguiseNickname.changeSkin: Boolean
    get() = getParameterValue("changeSkin")
    set(value) {
        getParameter<Boolean>("changeSkin").value = value
    }

inline var AddReconnectButton.auto: Boolean
    get() = getParameterValue("auto")
    set(value) {
        getParameter<Boolean>("auto").value = value
    }

inline var AddReconnectButton.auto_second: Int
    get() = getParameterValue("auto/second")
    set(value) {
        getParameter<Int>("auto/second").value = value
    }

inline var AutoAcceptParty.hide: Boolean
    get() = getParameterValue("hide")
    set(value) {
        getParameter<Boolean>("hide").value = value
    }

inline var AutoAcceptParty.press: Boolean
    get() = getParameterValue("press")
    set(value) {
        getParameter<Boolean>("press").value = value
    }

inline var AutoRequeue.command: String
    get() = getParameterValue("command")
    set(value) {
        getParameter<String>("command").value = value
    }

inline var AutoRequeue.delay: Int
    get() = getParameterValue("delay")
    set(value) {
        getParameter<Int>("delay").value = value
    }

inline var AutoRequeue.waitForGG: Boolean
    get() = getParameterValue("waitForGG")
    set(value) {
        getParameter<Boolean>("waitForGG").value = value
    }

inline var BlockTracker.blocks: Unit
    get() = getParameterValue("blocks")
    set(value) {
        getParameter<Unit>("blocks").value = value
    }

inline var BlockTracker.scanRadius: Int
    get() = getParameterValue("scanRadius")
    set(value) {
        getParameter<Int>("scanRadius").value = value
    }

inline var BlockTracker.showPath: Boolean
    get() = getParameterValue("showPath")
    set(value) {
        getParameter<Boolean>("showPath").value = value
    }

inline var BlockTracker.showPath_showBeacon: Boolean
    get() = getParameterValue("showPath/showBeacon")
    set(value) {
        getParameter<Boolean>("showPath/showBeacon").value = value
    }

inline var BlockTracker.showPath_canFly: Boolean
    get() = getParameterValue("showPath/canFly")
    set(value) {
        getParameter<Boolean>("showPath/canFly").value = value
    }

inline var DropperHelper.boxColor: ChromaColor
    get() = getParameterValue("boxColor")
    set(value) {
        getParameter<ChromaColor>("boxColor").value = value
    }

inline var DropperHelper.showY: Boolean
    get() = getParameterValue("showY")
    set(value) {
        getParameter<Boolean>("showY").value = value
    }

inline var DropperHelper.showY_yText: String
    get() = getParameterValue("showY/yText")
    set(value) {
        getParameter<String>("showY/yText").value = value
    }

inline var GiftESP.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var GiftESP.selectedTypes: List<GiftGameType>
    get() = getParameterValue("selectedTypes")
    set(value) {
        getParameter<List<GiftGameType>>("selectedTypes").value = value
    }

inline var GiftESP.renderDirectionArrow: Boolean
    get() = getParameterValue("renderDirectionArrow")
    set(value) {
        getParameter<Boolean>("renderDirectionArrow").value = value
    }

inline var GTBHelper.clipboard: Boolean
    get() = getParameterValue("clipboard")
    set(value) {
        getParameter<Boolean>("clipboard").value = value
    }

inline var GTBHelper.translate: Boolean
    get() = getParameterValue("translate")
    set(value) {
        getParameter<Boolean>("translate").value = value
    }

inline var HyChatChannelChanger.exceptionPrefix: String
    get() = getParameterValue("exceptionPrefix")
    set(value) {
        getParameter<String>("exceptionPrefix").value = value
    }

inline var HyChatChannelChanger.selectedPrefixTypes: List<PrefixType>
    get() = getParameterValue("selectedPrefixTypes")
    set(value) {
        getParameter<List<PrefixType>>("selectedPrefixTypes").value = value
    }

inline var InGameStatViewer.displayType: DisplayType
    get() = getParameterValue("displayType")
    set(value) {
        getParameter<DisplayType>("displayType").value = value
    }

inline var InGameStatViewer.displayType_yOffset: Double
    get() = getParameterValue("displayType/yOffset")
    set(value) {
        getParameter<Double>("displayType/yOffset").value = value
    }

inline var InGameStatViewer.displayType_scale: Double
    get() = getParameterValue("displayType/scale")
    set(value) {
        getParameter<Double>("displayType/scale").value = value
    }

inline var InGameStatViewer.displayType_onlyLook: Boolean
    get() = getParameterValue("displayType/onlyLook")
    set(value) {
        getParameter<Boolean>("displayType/onlyLook").value = value
    }

inline var InGameStatViewer.order: List<InGameStatIdentifier>
    get() = getParameterValue("order")
    set(value) {
        getParameter<List<InGameStatIdentifier>>("order").value = value
    }

inline var MurdererFinder.glowGold: Boolean
    get() = getParameterValue("glowGold")
    set(value) {
        getParameter<Boolean>("glowGold").value = value
    }

inline var MurdererFinder.murdererColor: ChromaColor
    get() = getParameterValue("murdererColor")
    set(value) {
        getParameter<ChromaColor>("murdererColor").value = value
    }

inline var MurdererFinder.glowSurvivor: Boolean
    get() = getParameterValue("glowSurvivor")
    set(value) {
        getParameter<Boolean>("glowSurvivor").value = value
    }

inline var MurdererFinder.glowSurvivor_color: ChromaColor
    get() = getParameterValue("glowSurvivor/color")
    set(value) {
        getParameter<ChromaColor>("glowSurvivor/color").value = value
    }

inline var MurdererFinder.alphaColor: ChromaColor
    get() = getParameterValue("alphaColor")
    set(value) {
        getParameter<ChromaColor>("alphaColor").value = value
    }

inline var MurdererFinder.targetColor: ChromaColor
    get() = getParameterValue("targetColor")
    set(value) {
        getParameter<ChromaColor>("targetColor").value = value
    }

inline var MurdererFinder.targetArrow: Boolean
    get() = getParameterValue("targetArrow")
    set(value) {
        getParameter<Boolean>("targetArrow").value = value
    }

inline var MurdererFinder.targetPath: Boolean
    get() = getParameterValue("targetPath")
    set(value) {
        getParameter<Boolean>("targetPath").value = value
    }

inline var MurdererFinder.glowGold_color: ChromaColor
    get() = getParameterValue("glowGold/color")
    set(value) {
        getParameter<ChromaColor>("glowGold/color").value = value
    }

inline var PartyGamesHelper.jigsaw: Boolean
    get() = getParameterValue("jigsaw")
    set(value) {
        getParameter<Boolean>("jigsaw").value = value
    }

inline var PartyGamesHelper.rpg16: Boolean
    get() = getParameterValue("rpg16")
    set(value) {
        getParameter<Boolean>("rpg16").value = value
    }

inline var PartyGamesHelper.rpg16_color: ChromaColor
    get() = getParameterValue("rpg16/color")
    set(value) {
        getParameter<ChromaColor>("rpg16/color").value = value
    }

inline var PartyGamesHelper.avalanche: Boolean
    get() = getParameterValue("avalanche")
    set(value) {
        getParameter<Boolean>("avalanche").value = value
    }

inline var PartyGamesHelper.avalanche_color: ChromaColor
    get() = getParameterValue("avalanche/color")
    set(value) {
        getParameter<ChromaColor>("avalanche/color").value = value
    }

inline var PartyGamesHelper.animal: Boolean
    get() = getParameterValue("animal")
    set(value) {
        getParameter<Boolean>("animal").value = value
    }

inline var PartyGamesHelper.animal_color: ChromaColor
    get() = getParameterValue("animal/color")
    set(value) {
        getParameter<ChromaColor>("animal/color").value = value
    }

inline var PartyGamesHelper.anvil: Boolean
    get() = getParameterValue("anvil")
    set(value) {
        getParameter<Boolean>("anvil").value = value
    }

inline var PartyGamesHelper.anvil_color: ChromaColor
    get() = getParameterValue("anvil/color")
    set(value) {
        getParameter<ChromaColor>("anvil/color").value = value
    }

inline var PartyGamesHelper.maze: Boolean
    get() = getParameterValue("maze")
    set(value) {
        getParameter<Boolean>("maze").value = value
    }

inline var PartyGamesHelper.dive: Boolean
    get() = getParameterValue("dive")
    set(value) {
        getParameter<Boolean>("dive").value = value
    }

inline var PartyGamesHelper.dive_color: ChromaColor
    get() = getParameterValue("dive/color")
    set(value) {
        getParameter<ChromaColor>("dive/color").value = value
    }

inline var PartyGamesHelper.highGround: Boolean
    get() = getParameterValue("highGround")
    set(value) {
        getParameter<Boolean>("highGround").value = value
    }

inline var PartyGamesHelper.highGround_color: ChromaColor
    get() = getParameterValue("highGround/color")
    set(value) {
        getParameter<ChromaColor>("highGround/color").value = value
    }

inline var PartyGamesHelper.labEscape: Boolean
    get() = getParameterValue("labEscape")
    set(value) {
        getParameter<Boolean>("labEscape").value = value
    }

inline var PartyGamesHelper.workshop: Boolean
    get() = getParameterValue("workshop")
    set(value) {
        getParameter<Boolean>("workshop").value = value
    }

inline var PixelPartyHelper.boxColor: ChromaColor
    get() = getParameterValue("boxColor")
    set(value) {
        getParameter<ChromaColor>("boxColor").value = value
    }

inline var PixelPartyHelper.beaconColor: ChromaColor
    get() = getParameterValue("beaconColor")
    set(value) {
        getParameter<ChromaColor>("beaconColor").value = value
    }

inline var PixelPartyHelper.beaconArrow: Boolean
    get() = getParameterValue("beaconArrow")
    set(value) {
        getParameter<Boolean>("beaconArrow").value = value
    }

inline var PixelPartyHelper.findSafe: Boolean
    get() = getParameterValue("findSafe")
    set(value) {
        getParameter<Boolean>("findSafe").value = value
    }

inline var ShowPingInTab.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var TrajectoryPreview.showTrace: Boolean
    get() = getParameterValue("showTrace")
    set(value) {
        getParameter<Boolean>("showTrace").value = value
    }

inline var TrajectoryPreview.showTrace_color: ChromaColor
    get() = getParameterValue("showTrace/color")
    set(value) {
        getParameter<ChromaColor>("showTrace/color").value = value
    }

inline var TrajectoryPreview.endColor: ChromaColor
    get() = getParameterValue("endColor")
    set(value) {
        getParameter<ChromaColor>("endColor").value = value
    }

inline var TrajectoryPreview.targetColor: ChromaColor
    get() = getParameterValue("targetColor")
    set(value) {
        getParameter<ChromaColor>("targetColor").value = value
    }

inline var TrajectoryPreview.glowTarget: Boolean
    get() = getParameterValue("glowTarget")
    set(value) {
        getParameter<Boolean>("glowTarget").value = value
    }

inline var TrajectoryPreview.glowTarget_color: ChromaColor
    get() = getParameterValue("glowTarget/color")
    set(value) {
        getParameter<ChromaColor>("glowTarget/color").value = value
    }

inline var TrajectoryPreview.selectedTypes: List<TrajectoryType>
    get() = getParameterValue("selectedTypes")
    set(value) {
        getParameter<List<TrajectoryType>>("selectedTypes").value = value
    }

inline var GhostBlock.restore: Int
    get() = getParameterValue("restore")
    set(value) {
        getParameter<Int>("restore").value = value
    }

inline var GhostBlock.ignoreSecret: Boolean
    get() = getParameterValue("ignoreSecret")
    set(value) {
        getParameter<Boolean>("ignoreSecret").value = value
    }

inline var DamageIndicator.type: DamageIndicateType
    get() = getParameterValue("type")
    set(value) {
        getParameter<DamageIndicateType>("type").value = value
    }

inline var DamageIndicator.precision: Int
    get() = getParameterValue("precision")
    set(value) {
        getParameter<Int>("precision").value = value
    }

inline var EndermanSlayerHelper.beacon: Boolean
    get() = getParameterValue("beacon")
    set(value) {
        getParameter<Boolean>("beacon").value = value
    }

inline var EndermanSlayerHelper.beacon_color: ChromaColor
    get() = getParameterValue("beacon/color")
    set(value) {
        getParameter<ChromaColor>("beacon/color").value = value
    }

inline var EndermanSlayerHelper.directionArrow: Boolean
    get() = getParameterValue("directionArrow")
    set(value) {
        getParameter<Boolean>("directionArrow").value = value
    }

inline var EndermanSlayerHelper.notifyBeacon: Boolean
    get() = getParameterValue("notifyBeacon")
    set(value) {
        getParameter<Boolean>("notifyBeacon").value = value
    }

inline var EndermanSlayerHelper.skull: Boolean
    get() = getParameterValue("skull")
    set(value) {
        getParameter<Boolean>("skull").value = value
    }

inline var EndermanSlayerHelper.skull_color: ChromaColor
    get() = getParameterValue("skull/color")
    set(value) {
        getParameter<ChromaColor>("skull/color").value = value
    }

inline var EndermanSlayerHelper.order: List<VoidgloomIdentifier>
    get() = getParameterValue("order")
    set(value) {
        getParameter<List<VoidgloomIdentifier>>("order").value = value
    }

inline var ExperimentationTableHelper.types: List<ExperimentationType>
    get() = getParameterValue("types")
    set(value) {
        getParameter<List<ExperimentationType>>("types").value = value
    }

inline var FairySoulWaypoint.showPath: Boolean
    get() = getParameterValue("showPath")
    set(value) {
        getParameter<Boolean>("showPath").value = value
    }

inline var GemstoneESP.radius: Int
    get() = getParameterValue("radius")
    set(value) {
        getParameter<Int>("radius").value = value
    }

inline var GemstoneESP.selectedGemstoneTypes: List<Gemstone>
    get() = getParameterValue("selectedGemstoneTypes")
    set(value) {
        getParameter<List<Gemstone>>("selectedGemstoneTypes").value = value
    }

inline var GlowDungeonsBats.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var GlowDungeonsTeammates.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var GlowStarDungeonMobs.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var GlowStarDungeonMobs.showFel: Boolean
    get() = getParameterValue("showFel")
    set(value) {
        getParameter<Boolean>("showFel").value = value
    }

inline var ShowDungeonsDoorKey.color: ChromaColor
    get() = getParameterValue("color")
    set(value) {
        getParameter<ChromaColor>("color").value = value
    }

inline var ShowWitherShieldCoolTime.onlyHeld: Boolean
    get() = getParameterValue("onlyHeld")
    set(value) {
        getParameter<Boolean>("onlyHeld").value = value
    }

inline var ShowWitherShieldCoolTime.onlyCooltime: Boolean
    get() = getParameterValue("onlyCooltime")
    set(value) {
        getParameter<Boolean>("onlyCooltime").value = value
    }

inline var ShowWitherShieldCoolTime.precision: Int
    get() = getParameterValue("precision")
    set(value) {
        getParameter<Int>("precision").value = value
    }

inline var ShowWitherShieldCoolTime.readyText: String
    get() = getParameterValue("readyText")
    set(value) {
        getParameter<String>("readyText").value = value
    }

inline var ShowWitherShieldCoolTime.text: String
    get() = getParameterValue("text")
    set(value) {
        getParameter<String>("text").value = value
    }

inline var CancelCertainBlockRendering.blocks: List<Block>
    get() = getParameterValue("blocks")
    set(value) {
        getParameter<List<Block>>("blocks").value = value
    }